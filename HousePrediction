# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the california Housing dataset
boston = fetch_california_housing()
data = pd.DataFrame(boston.data, columns=boston.feature_names)
data['price'] = boston.target

# Assuming your target variable is 'price' and features are other columns
X = data.drop('price', axis=1)
y = data['price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression Model (Scikit-learn)
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)

# Make predictions on the test set
linear_predictions = linear_model.predict(X_test_scaled)

# Create a DataFrame for linear regression results
linear_results = pd.DataFrame({
    'Actual Price': y_test,
    'Linear Regression Predicted Price': linear_predictions
})

# Display the first 10 rows of linear regression results
print(linear_results.head(10))

# Neural Network Model (TensorFlow)
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1)
    ])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=0)

# Make predictions on the test set using the neural network model
nn_predictions = model.predict(X_test_scaled).flatten()

# Create a DataFrame for neural network results
nn_results = pd.DataFrame({
    'Actual Price': y_test,
    'Neural Network Predicted Price': nn_predictions
})

# Display the first 10 rows of neural network results
print(nn_results.head(10))
